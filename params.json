{
  "name": "randomhost/steamsignature",
  "tagline": "Displays the online status of Steam players as PNG image.",
  "body": "[![Build Status][0]][1]\r\n\r\nIntroduction\r\n============\r\n\r\nThis package reads the [Steam Web-API][2] and [community XML data][3] of Valve's\r\nSteam platform and displays the current online status of players as PNG image,\r\ndesigned to be used in forum and blog signatures.\r\n\r\nThe included link target method detects whether the player is currently playing\r\non a multiplayer server and returns either the URL to the player's steam profile\r\nor the URL for joining the game using the visitor's locally installed Steam\r\nclient if this is supported by the game.\r\n\r\nUsage\r\n-----\r\n\r\nA basic approach at using this package could look like this:\r\n\r\n```php\r\n<?php\r\nnamespace randomhost\\Steam;\r\n\r\nrequire_once '/path/to/vendor/autoload.php';\r\n\r\n// setup directories\r\n$imageDir = '/path/to/images/';\r\n$fontsDir = '/path/to/fonts/';\r\n$cacheDir = '/path/to/cache/';\r\n\r\n// init an API instance for talking to the Steam Web API\r\n$api = new API('yourSteamApiKey');\r\n\r\n// resolve custom URL into steam ID\r\n$steamId = $api->resolveVanityUrl('yourCustomProfileUrl');\r\n\r\n// init Signature instance\r\n$signature = new Signature($api, $steamId, $imageDir, $fontsDir, $cacheDir);\r\n\r\n// renders the picture\r\n$signature->render();\r\n\r\n// returns a link to the user's profile page or a Steam join link\r\n$signature->getLinkTarget();\r\n```\r\n\r\nThe example above should be mostly self-explanatory.\r\n\r\nThe `API` class must be initialized with a personalized API key. You can obtain\r\nyour API key from the [Steam developer website][4].\r\n\r\nThe `API` class is a very limited implementation of the Steam Web-API and is not\r\nsupposed to be used directly, except for one method:\r\n\r\n1. `API::resolveVanityUrl($vanityUrl)`  \r\n    Resolves the given vanity URL into a 64-Bit Steam ID, ready to be passed to\r\n    the `Signature` class constructor.\r\n\r\nThe `Signature` class provides two public methods:\r\n\r\n1. `Signature::render()`  \r\n    Outputs the signature image directly to the web browser.  \r\n      \r\n    **Note:** This method must be the only code which sends output to the web\r\n    browser. If you receive `Cannot modify header information` errors, please\r\n    ensure that your application does **not** generate any output **before**\r\n    `Signature::render()` is called. Additionally, no output may be generated\r\n    **after** calling this method as it would break the image.\r\n    \r\n2. `Signature::getLinkTarget()`  \r\n    Returns a link to the Steam user's profile page or a join link to join the\r\n    game the user is currently playing if the game supports joining through\r\n    Steam.\r\n \r\nAn example implementation of this script can be found in the `src/www/` folder.\r\n\r\nLicense\r\n-------\r\n\r\nSee LICENSE.txt for full license details.\r\n\r\n[0]: https://travis-ci.org/randomhost/steamsignature.svg\r\n[1]: https://travis-ci.org/randomhost/steamsignature\r\n[2]: https://developer.valvesoftware.com/wiki/Steam_Web_API\r\n[3]: https://partner.steamgames.com/documentation/community_data\r\n[4]: http://steamcommunity.com/dev\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}